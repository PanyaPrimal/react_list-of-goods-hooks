{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","visibleGoods","useMemo","sort","a","b","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","isResetButtonVisible","className","type","cn","onClick","prevState","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,mEAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAME,IAwBME,EAAU,WACrB,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAmBMC,EAAeC,mBAAQ,kBA7CE,SAC/BH,EACAH,GAEA,IAAIK,EAAY,UAAOR,GAiBvB,OAfAQ,EAAaE,MAAK,SAACC,EAAGC,GACpB,OAAQN,GACN,KAAKP,EAASc,SACZ,OAAOF,EAAEG,cAAcF,GACzB,KAAKb,EAASgB,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OACtB,QACE,OAAO,MAITb,IACFK,EAAeA,EAAaS,WAGvBT,EAwB4BU,CAAkBZ,EAAUH,KAC7D,CAACG,EAAUH,IAEPgB,EAAuBb,IAAaP,EAASM,MAAQF,EAE3D,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UAAW,CACjC,WAAYhB,IAAaP,EAASM,OAEpCkB,QAzBmB,WACzBhB,EAAYR,EAASc,WAmBjB,iCAUA,wBACEQ,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYhB,IAAaP,EAASgB,SAEpCQ,QA/Ba,WACnBhB,EAAYR,EAASgB,SAyBjB,4BAUA,wBACEM,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,YAAanB,IAEfoB,QArCQ,WACdnB,GAAc,SAACoB,GAAD,OAAgBA,MA+B1B,qBAUCL,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QA3DI,WACZnB,GAAc,GACdG,EAAYR,EAASM,OAsDf,sBAUJ,6BACGG,EAAaiB,KAAI,SAACC,GAAD,OAChB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YCrHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c6845bf2.chunk.js","sourcesContent":["import { useMemo, useState, FC } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport const getReorderedGoods = (\n  sortType: SortType,\n  isReversed: boolean,\n): string[] => {\n  let visibleGoods = [...goodsFromServer];\n\n  visibleGoods.sort((a, b) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return a.localeCompare(b);\n      case SortType.LENGTH:\n        return a.length - b.length;\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods = visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n};\n\nexport const App: FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const reset = () => {\n    setIsReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  const sortAlphabetically = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const sortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const reverse = () => {\n    setIsReversed((prevState) => !prevState);\n  };\n\n  const visibleGoods = useMemo(() => getReorderedGoods(sortType, isReversed),\n    [sortType, isReversed]);\n\n  const isResetButtonVisible = sortType !== SortType.NONE || isReversed;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortType === SortType.NONE,\n          })}\n          onClick={sortAlphabetically}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        {isResetButtonVisible && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}